import {useState, useEffect} from 'react';
import {useRouter} from 'next/router';
import Head from 'next/head';

import {gql} from 'apollo-boost';
import {useLazyQuery} from '@apollo/client';
import {ChevronLeftIcon, ChevronRightIcon} from '@heroicons/react/solid';

import Search from '@components/Search';
import Logo from '@components/Logo';
import Loading from '@components/Loading';

const SEARCH_ARTICLE = gql`
  query ($term: String!, $retstart: Int, $retmax: Int) {
    search(term: $term, retstart: $retstart, retmax: $retmax) {
      pagination {
        count
        retmax
        retstart
      }
      articles {
        uid
        title
        sortpubdate
        fulljournalname
        authors {
          name
        }
      }
    }
  }
`;

const datePattern = (date) => {
  const datePattern = /^(\d{4})\/(\d{2})\/(\d{2}) (\d{2}):(\d{2})$/;
  const [, year, month, day] = datePattern.exec(date);
  return `${day}/${month}/${year}`;
};

export default function Home() {
  const {query} = useRouter();

  const [searchTerm, setSearchTerm] = useState('');
  const [articles, setArticles] = useState([]);
  const [pagination, setPagination] = useState({next: 0, prev: 0, count: 0, max: 20});

  const [executeSearch, {loading, data}] = useLazyQuery(SEARCH_ARTICLE);

  useEffect(() => {
    if (query && query.term) {
      setSearchTerm(query.term);
    }
  }, [query]);

  useEffect(() => {
    if (searchTerm.length >= 3) {
      executeSearch({
        variables: {term: searchTerm},
      });
    } else {
      setArticles([]);
    }
  }, [searchTerm, executeSearch]);

  useEffect(() => {
    if (data && data.search && (!!data.search.pagination || !!data.search.articles)) {
      const {
        articles,
        pagination: {count, retmax, retstart},
      } = data.search;

      setArticles(articles);
      const next_page = retstart + retmax;
      const prev_page = next_page - retmax;
      setPagination({
        prev: prev_page < 0 ? 0 : prev_page,
        next: next_page >= count ? count : next_page,
        count,
      });
    }
  }, [data]);

  return (
    <div className="bg-grey-lightest tracking-wide">
      <Head>
        <title>Healx Front End Technical Assessment</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav id="header" className="fixed w-full z-10 pin-t bg-white border-b border-grey-light">
        <div className="w-full container mx-auto flex items-center justify-between mt-0 py-4">
          <Logo text="Journals" />
          <Search searchTerm={(e) => setSearchTerm(e.target.value)} value={searchTerm} />
        </div>
      </nav>

      <div className="container w-full flex flex-wrap mx-auto px-2 pt-16">
        <div className="w-full p-8 mt-6 lg:mt-0 text-black leading-normal bg-white border border-grey-light border-rounded">
          {loading && searchTerm && <Loading />}

          {articles.length == 0 && !loading && (
            <div className="flex items-center justify-center w-full h-full">Empty!</div>
          )}

          {articles &&
            !loading &&
            articles.map((article) => (
              <article key={article.uid} className="pt-5">
                <a
                  href={`https://pubmed.ncbi.nlm.nih.gov/${article.uid}`}
                  target="_blank"
                  rel="noreferrer"
                >
                  {article.title}
                </a>
                <div className="text-xs text-gray-600">{datePattern(article.sortpubdate)}</div>
                <div className="text-xs text-gray-600">
                  {article.authors.map((author) => author.name).join(', ')}
                </div>
                <hr className="border-grey-light mt-5"></hr>
              </article>
            ))}
        </div>
      </div>
      {articles && (
        <div className="container w-full flex flex-wrap mx-auto">
          <div className="w-full p-8 mt-6 lg:mt-0">
            <div className="sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-700">
                  Showing <span className="font-medium">{pagination.prev}</span> to{' '}
                  <span className="font-medium">{pagination.next}</span> of{' '}
                  <span className="font-medium">{pagination.count}</span> results
                </p>
              </div>
              <div>
                <nav
                  className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                  aria-label="Pagination"
                >
                  <button
                    onClick={() =>
                      executeSearch({variables: {term: searchTerm, retstart: pagination.prev}})
                    }
                    className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                  >
                    <ChevronLeftIcon className="h-5 w-5" aria-hidden="true" />
                    <span>Previous</span>
                  </button>
                  <button
                    onClick={() =>
                      executeSearch({variables: {term: searchTerm, retstart: pagination.next}})
                    }
                    className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                  >
                    <span>Next</span>
                    <ChevronRightIcon className="h-5 w-5" aria-hidden="true" />
                  </button>
                </nav>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
